#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>


const unsigned char PROGMEM bitmap []=
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf8, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xc1, 0xff, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0x83, 0xff, 
  0xf8, 0x00, 0x00, 0xff, 0xff, 0x07, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xfe, 0x0f, 0xff, 0xf0, 0x00, 
  0x01, 0xff, 0xfe, 0x0f, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xfc, 0x1f, 0xff, 0xe0, 0x00, 0x03, 0xff, 
  0xf8, 0x3f, 0xff, 0xc0, 0x00, 0x07, 0xff, 0xf8, 0x3f, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xf0, 0x7f, 
  0xff, 0x80, 0x00, 0x0f, 0xff, 0xe0, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0xff, 0xff, 0x00, 
  0x00, 0x3f, 0xff, 0xc1, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xc1, 0xff, 0xf8, 0x00, 0x00, 0x7f, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x07, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// Define OLED display width and height
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

// Create an SSD1306 display object
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// I2C pins for ESP32
#define I2C_SDA 21
#define I2C_SCL 22
uint8_t btn1=14,btn2=26,btn3=27,ack=0;
String greet_ = "Welcome User!";
int16_t dump_x, dump_y; // Use int16_t instead of int
int16_t x_ = 0, y_ = 0; // Coordinates must be int16_t
uint16_t text_w = 0, text_h = 0; //
unsigned long startClock,currentClock;
const unsigned NormalDuration=2000;


void setup(){
  Serial.begin(115200);
  pinMode(btn1, INPUT_PULLUP);
  pinMode(btn2, INPUT_PULLUP);
  pinMode(btn3, INPUT_PULLUP);
  pinMode(19,OUTPUT);
  pinMode(33, OUTPUT);
  oledSet();
}
void loop(){
  Serial.println(digitalRead(btn1));
  Serial.println(digitalRead(btn2));
  Serial.println(digitalRead(btn3));
  while(1){
    if(!(digitalRead(btn1)&digitalRead(btn2)&digitalRead(btn3))==0){
    oled_greet();
    delay(200);
    }else break;
    
  }
  startClock=millis();  
  
  while(digitalRead(btn1)==1){ //exit
    delay(50);//debounce
    currentClock=millis();
    float tbdt_bag=200;
    uint8_t gas_state=1; 

    MEASUREMENT_DISPLAY(tbdt_bag,gas_state);
    if(currentClock-startClock>=NormalDuration){
      //sendToGsheet&Telegram
        digitalWrite(33,1);
        delay(2000);
        digitalWrite(33,0);
      startClock=millis();
    }else if((((gas_state==1)|(tbdt_bag>=500))&(!(ack)))==1){
      while(1){
        display.clearDisplay();
        display.setCursor(0,0);
        display.print("-!WARNING!-\nHazard Detected\Alarm_State_ON\nPress_Middle_Button_To_Stop");
        display.display();
        alarm_on(1,19);
        delay(50);
        if(!(digitalRead(btn2))==1){
          alarm_on(0,19);
          ack=1;
          startClock=millis();
          break;
        }
        //sendToGsheet&tele
        digitalWrite(33,1);
        delay(2000);
        digitalWrite(33,0);
        //delay(500);
      }
    }else if(!(digitalRead(btn3))==1){
        delay(50);//debounce
        //sendToGsheet&tele
        digitalWrite(33,1);
        delay(2000);
        digitalWrite(33,0);
        startClock=millis();    
    }
    
  }


}



void oledSet(){
  // Initialize I2C
  Wire.begin(I2C_SDA, I2C_SCL);

  // Initialize the SSD1306 display
  if (!display.begin(SSD1306_PAGEADDR, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }

  // Clear the display buffer
  display.clearDisplay();

  // Display a startup message
  display.setTextSize(1); // Set text size to 1
  display.setTextColor(SSD1306_WHITE); // Set text color
  display.drawBitmap((128-56)/2,((64-48)/2),bitmap,56,47,SSD1306_WHITE);
  display.display();  
  delay(2000);
  display.clearDisplay();
  display.getTextBounds(greet_, 0, 0, &dump_x, &dump_y, &text_w, &text_h); // Correct types
  x_ = (128 - text_w) / 2; // Center horizontally
  y_ = (64 - text_h) / 2;  // Center vertically
  display.setCursor(x_, y_);
  display.println(greet_);
  display.display();
  delay(2000); // Wait 2 seconds
  display.clearDisplay();

}
void oled_greet(){
  display.clearDisplay();
  display.setCursor(0,0);
  display.print("Start_Measurement\n\nPress_Any_Button!\n");
  display.display();
  display.clearDisplay();
}

void MEASUREMENT_DISPLAY(float turbidity_val, uint8_t gas_state){
  display.clearDisplay();
  display.getTextBounds(greet_, 0, 0, &dump_x, &dump_y, &text_w, &text_h);
  x_ = (128 - text_w) ; // allign right
  y_ = (64 - text_h);  // allign right
  display.setCursor(0,text_h);
  display.println("---------------");
  display.println("Turbidity:");
  display.println(turbidity_val);
  display.println("Gas_State: ");
  display.println(gas_state); 
  display.print("---------------");
  greet_="halt";

  display.setCursor(0,0);
  display.print(greet_); 
  display.setCursor(0,y_);
  display.print("Send");
  display.display();
  delay(2000);
  display.clearDisplay();
  }
void alarm_on(uint8_t state,uint8_t buzz_port){
  if(state==1){
    digitalWrite(buzz_port,state);
  }else digitalWrite(buzz_port,state);
}
